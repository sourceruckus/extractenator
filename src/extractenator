#!/bin/bash
#
# Extractenator - a spicy self-extracting installer creator
#
# Copyright 2018-2022 Michael D Labriola <veggiemike@sourceruckus.org>
#
# Licensed under the GPLv3. See the file COPYING for details. 
#
# This script is a utility for creating a self extracting executable that runs
# an install script after extracting to a temp directory.


# assume we're in the source tree if $PWD/extractenator.sh.in exists
if [ -f $(dirname $0)/extractenator.sh.in ]; then
    LIBDIR=$(realpath $(dirname $0))
    CONFDIR=$LIBDIR
else
    LIBDIR=__LIBDIR__
    CONFDIR=__CONFDIR__
fi
. $LIBDIR/extractenator.sh
[ -f $CONFDIR/extractenator.conf ] && . $CONFDIR/extractenator.conf
[ -f ~/.extractenator.conf ] && . ~/.extractenator.conf


usage()
{
    if [ -n "$*" ]; then
        echo ERROR: $*
        echo
    fi
    echo "Extractenator - a spicy self-extracting installer creator."
    echo "Copyright (C) 2018-2022 Michael D Labriola <veggiemike@sourceruckus.org>"
    echo
    echo "Extractenator is a utility for creating compressed, self extracting"
    echo "executables that run an embedded install script after extracting to a"
    echo "temp directory."
    echo
    echo "usage: `basename $0` OPTIONS PAYLOAD..."
    echo
    echo "  -h, --help                Show this help message and exit."
    echo
    echo "  -V, --version             Show version string and exit."
    echo
    echo "  -f, --filename EXEFILE    Specify output filename. (REQUIRED)"
    echo
    echo "  -e, --exclude PATTERN     Exclude files in PAYLOAD that match PATTERN,"
    echo "                            a glob(3)-style wildcard pattern.  Can be"
    echo "                            specified multiple times."
    echo
    echo "  -s, --script SCRIPT       Specify installation script to be run after"
    echo "                            extraction.  SCRIPT will be included as archive"
    echo "                            content, you don't have to also specify it as"
    echo "                            payload. (REQUIRED)"
    echo
    echo "  -c, --compressor COMP     Use COMP compressor in pipeline during archive"
    echo "                            creation.  See extracenator.conf for details on"
    echo "                            valid compressors and defaults."
    echo
    echo "  -C, --compressor-args ARGS  Pass ARGS into the specified compressor.  If"
    echo "                              --compressor was specified, defaults to the"
    echo "                              matching COMP_ARGS variable in extractenator.conf."
    echo "                              Can be provided multiple times, causing argurments"
    echo "                              to be appended (i.e., becaue you cannot have"
    echo "                              spaces in ARGS)."
    # NOTE: Here's the last round of compressor benchmarking I did on a Ryzen 7
    #       2700X (8 cores/16 threads).  I beleive these were sizes and times
    #       for running kernel_tar on a 5.4 kernel I had built.
    #
    #       xz:     62M  1:50
    #       xz -T0: 63M  0:14.8
    #       gzip:   83M  0:08.9
    #       bzip2:  76M  0:16.9
    #       zstd:   82M  0:01.8
    #
    # NOTE: Here's another round of benchmarks, this time kernel_tar of a 5.11
    #       kernel.  Trying to decide what makes more sense...  strive for
    #       smaller file to send over potentially slow network?  or faster to
    #       extract once received...?
    #
    #       xz -T0:        86M 0:21.1
    #       zstd:         105M 0:03.2
    #       zstd -T0 -10:  97M 0:03.5
    #       zstd -T0 -15:  96M 0:09.3
    #       zstd -T0 -19:  91M 0:21.3
    #       zstd -T0 -20:  90M 2:11.3
    #
    #       here are installation benchmarks for those.  from dom0 to dom0 and
    #       3 domUs.
    #       ./kernel-installer-x.y.z.sh -r "aragorn legolas gimli boromir"
    #
    #       xz -T0:       0:32.9
    #       zstd:         0:24.0
    #       zstd -T0 -10: 0:23.7
    #       zstd -T0 -15: 0:22.9
    #       zstd -T0 -19: 0:23.5
    #       zstd -T0 -20: 0:23.7
    #
    #       here's another one, this time installing onto a dom0 at home
    #       accross a 2.5MB/s internet connection
    #
    #       xz -T0:       0:42.1
    #       zstd:         0:49.2
    #       zstd -T0 -10: 0:44.4
    #       zstd -T0 -15: 0:44.1
    #       zstd -T0 -19: 0:42.0
    #       zstd -T0 -20: 0:41.4
    #
    #       for the record, doing kernel_installer glorfindel (i.e., not using
    #       kernel_tar or extractenator) takes 30s...  it's a bit quicker
    #       because it's already using zlib compression, and when the file
    #       transfer is done, there's nothing else to do.  the benefit of using
    #       kernel_tar/extractenator for distributed kernel installation isn't
    #       really speed, it's having a leftover installer to fall back to if
    #       we upgrade and recompile our source tree.
    #
}


# call getopt
#
# NOTE: This handles spacing out arguments correctly for the case statement
#       below and checks for unknown flags.  Required flags are checked for
#       below.
#
# NOTE: The set -- command causes the resulting output of getopt to replace the
#       current positional arguments (e.g, $1, $2).
#
__opts=$(getopt -un $(basename $0) \
    -o hVf:e:s:c:C: \
    --long help,version,filename:,exclude:,script:,compressor:,compressor-args: -- $@)
if [ $? != 0 ]; then
    echo
    usage
    exit 1
fi
set -- $__opts

# defaults
if [ -n "$DEFAULT_COMPRESSOR" ]; then
    compressor=$DEFAULT_COMPRESSOR
else
    compressor="zstd"
fi
tarflags=



# parse the new positional arguments
while true; do
    case "$1" in
        -V|--version)
            echo "Extractenator $VERSION"
            exit 0
            ;;
        -f|--filename)
            filename=$2
            shift 2
            ;;
        -e|--exclude)
            tarflags+=" --exclude="$2
            shift 2
            ;;
	-s|--script)
            script=$2
            shift 2
            ;;
	-c|--compressor)
            compressor=$2
            shift 2
            ;;
        -C|--compressor-args)
            # empty compargs if this is the first -C arg
            if [ -z "$compargs_set" ]; then
                compargs=$2
                compargs_set=y
            else
                compargs+=" $2"
            fi
            shift 2
            ;;
	--)
            # done parsing
            shift
            break
            ;;
	*)
            usage
            exit 1
            ;;
    esac
done
payload=$*

# check for required options
if [ -z "$filename" ]; then
    usage "--filename required"
    exit 1
fi
if [ -z "$script" ]; then
    usage "--script required"
    exit 1
fi
if [ -z "$payload" ]; then
    usage "PAYLOAD required"
    exit 1
fi

# figure out compressor settings
__comp=\$${compressor^^}_COMP
comp=`eval echo $__comp`
if [ -z "$compargs_set" ]; then
    __compargs=\$${compressor^^}_COMP_ARGS
    compargs=`eval echo $__compargs`
fi
__decomp=\$${compressor^^}_DECOMP
decomp=`eval echo $__decomp`
# make sure supplied compressor has settings in config file
if [ -z "$comp" -o -z "$decomp" ]; then
    usage "invalid compressor specified: $compressor - not in config file"
    exit 1
fi
# make sure system actually has configured compressor available
if [ ! -x "`which $comp`" -o ! -x "`which $decomp`" ]; then
    usage "specificed compressor missing utilities: $compressor"
    exit 1
fi

echo filename: $filename
echo script: $script
echo comp: $comp
echo compargs: $compargs
echo decomp: $decomp
echo payload: $payload
echo tarflags: $tarflags


# create the initial extraction script
echo -n "creating $filename... "
cat > $filename <<EOF
#!/bin/bash
skip=__SKIP__

dryrun=
remotes=
remotes_ws=
while [ \$# -gt 0 ] ; do
    case "\$1" in
        --dry-run|-n)
            dryrun=--dry-run
            shift
            ;;
        --remote-nodes|-r)
            remotes=\$2
            remotes_ws=\${remotes//,/ }
            shift 2
            ;;
        --)
            # stop parsing args, so users can explicitly pass arguments to
            # install script
            shift
            break
            ;;
        --help|-h|*)
            echo "usage: $(basename $filename) [--dry-run|-n] [--remote-nodes|-r NODE1,NODE2,...]"
            exit 0
            ;;
    esac
done

if [ -n "\$remotes" ]; then
    echo "remote install mode: \$remotes_ws"
    for x in \$remotes_ws; do
        echo "--- \$x ---"
        scp -p \$0 root@\$x:/tmp/\$(basename \$0) || exit 1
        ssh root@\$x "/tmp/\$(basename \$0) \$dryrun && rm -f /tmp/\$(basename \$0)" || exit 1
    done
    echo all done
    exit 0
fi

tmpdir=\`mktemp -dt \\\`basename \$0\\\`-XXXX\`

echo -n "extracting archive to \$tmpdir... "
(tail -n +\$skip \$0 | $decomp | tar -x --no-same-owner --no-same-permissions -C \$tmpdir) && echo DONE || { echo FAIL; exit 1; }

if [ -n "\$dryrun" ]; then
    echo "specified dry-run, installation script will not be run, tmpdir will not be cleaned up"
    # create install.sh in tmpdir for easy review
    head -n +\$((skip-1)) \$0 > \$tmpdir/install.sh
    exit 0
fi

pushd \$tmpdir >/dev/null
`cat $script`
popd >/dev/null

echo -n "removing \$tmpdir... "
rm -rf \$tmpdir && echo DONE || { echo FAIL; exit 1; }

exit 0
EOF
[ $? -eq 0 ] && echo DONE || { echo FAIL; exit 1; }

# sed the actual length into it
skip=$((`wc -l $filename | awk '{print $1}'`+1))
echo skip: $skip
sed -i "s|__SKIP__|$skip|" $filename

# and now append the payload
echo -n "appending payload... "
(tar -c $tarflags $payload | $comp $compargs >> $filename) || { echo FAIL; exit 1; }
echo DONE

# and make it executable
echo -n "making $filename executable... "
chmod +x $filename && echo DONE || { echo FAIL; exit 1; }

exit 0
